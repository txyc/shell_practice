# #############################################
# 时间：20230716
# 姓名：田鑫
# 电话：18384121601
# 邮箱：965622832@qq.com
# #############################################
一、linux系统启动过程的简要介绍

1、linux系统启动过程的5个阶段说明：
内核的引导 -> 打开电源后，bios开机自检，根据bios中设置的启动设备(硬盘)来启动，操作系统接管硬件后首先读取/boot目录下的内核文件
运行init -> init进程是所有系统进程的起点，启动init后首先读取配置文件/etc/inittab，根据运行级别(runlevel)去运行开机启动程序，这类程序在windows中叫做服务(service)，在linux中叫做守护进程(daemon)
系统初始化 -> 在init配置文件中的代码行si::sysinit:/etc/rc.d/rc.sysinit通过启动rc.sysinit脚本完成系统初始化工作
建立终端 -> rc执行完毕后，返回init。接下来会打开tty1-tty6的6个终端，用于用户登陆系统
用户登录系统 -> 一般而言用户登录多使用命令行、ssh、图形界面等登录方式

# #############################################
# 时间：20230716
# 姓名：田鑫
# 电话：18384121601
# 邮箱：965622832@qq.com
# #############################################
二、linux系统下的文件系统

linux文件系统的目录说明：
/bin -> 系统常用命令的存放路径
/boot -> 启动linux系统的部分核心文件，包括连接文件和镜像文件
/dev -> linux可操作设备的存放路径
/etc -> 系统管理所需的配置文件的存放目录
/home -> 用户主目录，用于存放非管理员的其他linux系统用户
/lib -> 系统所需的最基本的动态链接库文件
/lost+found -> 用于记录挂载磁盘出现异常信息的目录
/media -> linux自动识别的一些设备的管理目录，例如U盘、光驱
/mnt -> 用于用户临时挂在别的文件系统的目录
/opt -> 给主机额外安装软件所存放的目录
/proc -> 用于存放当前内和运行台的一些特殊文件的目录
/root -> 系统管理员root的主目录
/run -> 临时文件系统，存放系统启动以来的信息，系统重启时，该目录下的文件被删除
/sbin -> 用于存放系统管理员所使用的可执行命令
/selinux -> 存放用于selinux相关的文件
/srv -> 存放守护进程启动之后需要提取的数据
/sys -> 
/tmp -> 临时文件
/usr -> 是unix shared resources的缩写，用户的很多应用程序和文件都存放在该目录下。其中，/usr/bin存放系统用户使用的应用程序；/usr/sbin存放超级用户使用的比较高级的管理程序和系统手续程序；/usr/src是内核源代码默认的存放目录
/var -> 经常会被修改的文件的存放目录，例如各种日志文件

# #############################################
# 时间：20230716
# 姓名：田鑫
# 电话：18384121601
# 邮箱：965622832@qq.com
# #############################################
三、linux系统下的文件系统相关操作的命令和说明

1、使用ll或者ls -l命令可以展示文件的属性和文件所属的用户和组信息，其中
第一个字符代表文件的类别，例如：
d -> 目录
- -> 普通文件
l -> 链接文档
b -> 可供存储的接口设备
c -> 串行端口设备，如键盘、鼠标等
后续的9个字符组代表文件允许读写和执行的权限

2、文件的权限、属主、属组等属性的修改方法
chmod [-R] 777 ./filename
chown [-R] root ./filename
chgrp [-R] root ./filename

3、处理文件、目录的常用命令
ls/cd/pwd/mkdir/rmdir/cp/rm/mv/scp/touch/tail/cat

# #############################################
# 时间：20230716
# 姓名：田鑫
# 电话：18384121601
# 邮箱：965622832@qq.com
# #############################################
四、linux系统下的用户和用户组管理的相关操作和说明

1、用户的增删改查
useradd [-c|d|g|G|s|u] test_user
userdel [-r] test_user
usermod [-c|d|m|g|G|s|u|o] test_user

2、用户密码的操作
passwd [-l|u|d|f] test_user
l -> 锁定
u -> 解锁
d -> 使口令无效
f -> 强迫用户下次登录时修改口令

3、用户组的增删改查
groupadd [-g] test_group
groupdef test_group
groupmod [-g|o|n] test_group

4、切换用户组的方法
登陆后下发命令newgrp root

5、用户信息文件
/etc/passwd和/etc/shadow，有多个字段组成，字段之间用":"分割，字段信息如下：
登录名:加密口令:最后一次修改时间:最小时间间隔:最大时间间隔:警告时间:不活动时间:失效时间:标志

# #############################################
# 时间：20230716
# 姓名：田鑫
# 电话：18384121601
# 邮箱：965622832@qq.com
# #############################################
五、linux磁盘管理的操作

1、linux磁盘管理常用的三个命令为
df -> 用于列出文件系统的整体磁盘使用量
du -> 检查磁盘空间使用量
fdisk -> 用于磁盘分区

其中各个命令的使用形式如下：
df [-ahikHTm] dirname
a -> 列出所有的文件系统，包括系统特有的/proc等文件系统
k -> 以KB的容量显示各文件系统
m -> 以MB的容量显示各文件系统
h -> 以人较易阅读的GB/MB/KB等格式自行显示
H -> 以M=1000K代替M=1024K的进位方式
T -> 显示文件系统类型
i -> 不用硬盘容量，而以inode的数量来显示

du [-ahskm] dirname
a -> 列出所有文件和目录容量
h -> 以人们较易阅读的容量格式显示
s -> 仅列出总量
S -> 不包括子目录下的总计
k -> 以KB列出容量
m -> 以MB列出容量

fdisk [-l] 装置名称
l -> 输出后续装置所有的分区内容，如无后续装置参数，则列出整个系统内能够搜寻到的装置分区

2、磁盘的挂载、格式化、检查等操作
mount [-t 文件系统] [-L Label名] [-o 额外选项] [-n]  装置文件名  挂载点
umount [-fn] 装置文件名或者挂载点

mkfs [-t 文件系统格式] 装置文件名
fsck [-t 文件系统] [-ACay] 装置名称

# #############################################
# 时间：20230716
# 姓名：田鑫
# 电话：18384121601
# 邮箱：965622832@qq.com
# #############################################
五、vim操作

1、vi/vim操作介绍
vi/vim总共分为三种模式，分别为命令模式，输入模式和底线命令模式，三种模式的切换方法如下：
vi filename进入vi编辑器后，即进入命令模式，此时使用键盘上的命令即可进行特殊的增删改查操作；输入:即进入底线命令模式，可以使用:wq完成文件的保存退出；输入i进入输入模式，此时可用键盘完成常规的增删改查操作，输入esc即可退回到命令模式。
命令模式下键盘操作：
【光标移动】
n<space> -> n代表数字，先按数字再按空格键表示光标向右移动n个字符
+ -> 光标移动到非空格符的下一行
- -> 光标移动到非空格符的上一行
0 -> 表示移动到这一行的最前面字符处
$ -> 移动到这一行的最后面字符处
nG -> 移动到这个档案的第n行
n<Enter> -> n表示数字，先按数字再按换行符，表示光标向下移动n行
【搜索替换】
/word -> 向光标之下寻找一个名为word的字符串
?word -> 向光标之上寻找一个名为word的字符串
<n> -> n表示英文按键，代表重复上一个搜索动作
<N> -> 大写N表示反向进行前一个搜索动作
:n1,n2s/word1/word2/g -> 表示在n1到n2行之间查找word1字符并全局替换为word2字符

【删除复制粘贴】
x, X -> x表示删除后一个字符，X表示删除前一个字符
nx -> 表示删除n个字符
dd -> 删除光标所在的那一行
ndd -> 删除光标所在的向下n行
dG -> 删除光标所在到最后一行的所有字符
d1G -> 删除光标所在到第一行的所有字符
d$ -> 删除光标所在处到该行的最后一个字符
d0 -> 删除光标所在处到该行的第一个字符
yy -> 复制光标所在的那一行
nyy -> 复制光标所在的向下n行
yG -> 复制光标所在到最后一行的所有字符
y1G -> 复制光标所在到第一行的所有字符
y$ -> 复制光标所在处到该行的最后一个字符
y0 -> 复制光标所在处到该行的第一个字符
p, P -> p表示将已复制的数据贴在光标下一行，P则为贴在上一行
J -> 将光标所在行与下一行字符结合成同一行
c -> 重复删除多个字符，例如向下删除10行，[ 10cj]
u -> 复原前一个动作
[Ctrl]+r -> 重做上一个动作
. -> 重复前一个动作

底线命令模式下的常用命令：
:w -> 将标记的数据写入硬盘文件中
:w! -> 若文件为只读属性，强制写入该文件
:q -> 离开vi
:q! -> 修改档案后，不保存强制离开vi
:wq -> 修改档案后先存储，在离开vi
:w [newfilename] -> 将编辑的数据存储为另一个文件名
:r [filename] -> 在编辑的数据中，将filename的内容添加到光标所在行的后面
:n1,n2 w [newfilename] -> 将n1到n2之间的内容存储到另一个文件中
:! command -> 暂时离开vi到指令行模式下执行command的显示结果
:set nu -> 显示行号
:set nonu -> 取消行号显示

# #############################################
# 时间：20230717
# 姓名：田鑫
# 电话：18384121601
# 邮箱：965622832@qq.com
# #############################################
六、shell脚本编程的部分说明

1、变量的声明定义和使用
# 变量的声明定义
test_var="hello"
declare test_var1="hello world" 
# 变量的重定义
test_var1="world"
# 设置环境变量
set -a test_var
# 查询环境变量
env | grep test_var
# 变量的使用
echo $test_var
echo ${test_var}
# 删除变量
unset test_var1

2、字符串的拼接
test_var2="shell world"
# 拼接字符串，最外层的双引号换成单引号时第二种传参失效
greeting="hello, "$test_var2"!"
greeting1="hello, ${test_var2}!"
# 带入双引号的拼接
greeting2="hello, \"$test_var2\"!\n"

3、字符串的操作
test_str="hello world"
# 获取字符串的长度
echo ${#test_str}
echo ${#test_str[0]}
# 提取字符子串
echo ${test_str:1:4}
# 查找字符or的位置
echo `expr index "$test_str" or`

4、数组的使用
# 数组的定义
test_array=("hello" "shell" "world")
# 数组元素的读取
echo ${test_array[index]} #读取第index个元素
echo ${test_array[@]} #读取数组内的全部元素
# 获取数组的长度
echo ${#test_array[@]} #读取数组内元素个数
echo ${#test_array[*]} #读取数组内元素个数
echo ${#test_array[index]} #读取第index个元素的长度

5、脚本参数的传递使用
# shell脚本外部传入的参数在脚本中的获取格式为$n，n为数字，为0时表示执行的文件名，后续序号表示传入的参数
# 其他特殊字符的含义：
# $# -> 传递到脚本的参数个数
# $* -> 提取所有参数，将参数字符串化
# $$ -> 脚本运行的当前进程ID
# $! -> 后台运行的最后一个进程ID
# $@ -> 类似$*，提取所有参数，将参数数组化
# $- -> 显示shell使用的当前选项，同set命令
# $? -> 显示最后命令的退出状态，0表示陈egg，其他代表出错

# 从键盘输入参数的方法
read [-ers] [-a arrayname] [-d delim] [-i test] [-n number] [-p prompt] [-t timeout]
-a -> 后续跟随一个数组参数变量名
-d -> 后续跟一个技术标识符
-p -> 后续跟随一段提示信息
-e -> 标识开启命令补全功能
-n -> 后续跟随一个数字，定义输入文本的长度，常用于用户名/密码
-r -> 屏蔽\的转义字符
-s -> 安静模式，输入时不再频幕上显示，常用于密码输入
-t -> 后跟秒数，定义输入字符的等待时间

6、数值参数设置
【数值比较的操作符】
-eq -> 等于则为真
-ne -> 不等于则为真
-gt -> 大于则为真
-ge -> 大于等于则为真
-lt -> 小于则为真
-le -> 小于等于则为真
【算术运算操作】
a=2
b=3
# 数字算术运算时使用[]隔离
result=$[a+b]

自增操作：let i++
自减操作：let i--
let i+=10
let i-=10

【字符串测试】
test_str1="hello world"
test_str2="hello shell"
# 使用test配合运算符测试字符串
test $test_str1 = $test_str2 #检测两个字符串是否相等
test $test_str1 != $test_str2 #检测两个字符串是否不相等
test -z $test_str1 #检测字符串长度是否为0
test -n $test_str1 #检测字符串长度是否不为0
【文件测试】
test -e filename #检查文件是否存在
test -r filename #检查文件是否存在且可读
test -w filename #检查文件是否存在且可写
test -x filename #检查文件是否存在且可执行
test -s filename #检查文件是否存在且至少存在一个字符
test -d filename #检查文件是否存在且为目录
test -f filename #检查文件是否存在且为普通文件
test -c filename #检查文件是否存在且为字符型特殊文件
test -b filename #检查文件是否存在且为块特殊文件
【逻辑操作符】
test condition1 -a condition2 #condition1与condition2是否为真
test condition1 -o condition2 #condition1或condition2是否为真
test ! condition1 #condition1是否不为真

7、流程控制方法
判断语句中[...]的格式大于必须使用-gt，小于使用-lt
((...))的格式大于和小于可以直接使用>和<
【if条件控制语句】
if condition1
then
    excute_script1
elif condition2
then
    excute_script2
...
else
    excute_scriptN
fi

【for循环控制语句】
for var in item1 item2 ... itemN
do
    excute_script
done

【while/until循环控制语句】
while condition
do
    excute_script
done

until condition
do
    excute_script
done

8、函数的定义和使用
# [ function ] 标识符可有可无
# [()] 传递参数描述可有可无，可以直接使用$n按顺序输入参数进行处理
# [ return int; ] 返回值可有可无

[ function ] funcname [()]
{
    excute_script;
    [return int;]
}

# #############################################
# 时间：20230717
# 姓名：田鑫
# 电话：18384121601
# 邮箱：965622832@qq.com
# #############################################
七、linux部分命令集合的使用

1、grep/sed/awk
grep [-abcEFGhHiLnqrsvVwxy][-A<显示行数>][-B<显示列数>][-C<显示列数>][--help] pattern [files]
常用选项：
-i -> 忽略大小写进行匹配
-v -> 反向查找，只打印不匹配的行
-n -> 显示匹配行的行号
-r -> 递归查找子目录的文件
-l -> 只打印匹配的文件名
-c -> 只打印匹配的行数

sed options -e<script> filename
常用脚本动作
a -> 新增，将后面的字符串新增到指定行
c -> 取代
d -> 删除
i -> 插入
p -> 打印
s -> 取代
【示例】
sed -e 4a\newLine filename #将newLine添加到filename文件的第4行
sed '2a drink tea' filename #将drink tea增加到filename文件的第2行
sed '2,5d' filename #将filename文件第2-5行删除
sed '2,5c No 2-5 number' filename #将filename文件的2-5行替换为No 2-5 number
sed -n '5,7p' filename #将filename文件的5-7行打印出来
sed -n '/oo/p' filename #将filename文件中包含oo字符的行打印出来
sed -i 's/oo/kk/g' filename #将filename文件中的oo字符全局替换为kk字符，选项i表示需要修改文件，否则只会输出到屏幕

awk [选项参数] 'script' var=value file(s)
或
awk [选项参数] -f scriptfile var=value file(s)



2、wc
wc [-clw] filename
-c -> 只显示Bytes数
-l -> 显示行数
-w -> 只显示字数

【示例】
ll | wc -l

3、expr
expr expression
#常用于求表达式的值
【示例】
expr length "this is a test"
expr substr "this is a test" 3 5
expr 10 + 10

4、ifconfig

5、export
export [-fnp][var_name]=[var_value]
f -> 表示var_name为函数
n -> 接触变量的引用
p -> 列出所有shell赋予程序的环境变量

